#!/bin/bash

# Activer les agents SSH
source git/agents.sh

# R√©cup√©rer l'√©tat du repo
git fetch

# Mode test uniquement
if [[ "$1" == "--test" ]]; then
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})

    if [[ "$LOCAL" == "$REMOTE" ]]; then
        bash git/tools/displayMessage.sh "‚úÖ Aucun pull n√©cessaire"
    elif [[ "$LOCAL" != "$REMOTE" ]]; then
        bash git/tools/displayMessage.sh "üì• Vous avez besoin de pull"
    fi
    exit 0
fi

# V√©rifier si des commits locaux n'ont pas √©t√© push
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [[ "$LOCAL" == "$REMOTE" ]]; then
    # Tout est √† jour
    git pull && bash git/tools/displayMessage.sh "‚úÖ Pull effectu√©"
    exit 0
elif [[ "$LOCAL" == "$BASE" ]]; then
    # Le repo distant a des commits en avance
    git pull && bash git/tools/displayMessage.sh "‚úÖ Pull effectu√©"
    exit 0
elif [[ "$REMOTE" == "$BASE" ]]; then
    # Le repo local a des commits non push√©s
    bash git/tools/displayMessage.sh "‚ö†Ô∏è  Vous avez des commits non push√©s."
    read -p "‚ùì Voulez-vous √©craser vos commits locaux avec le pull ? (o/n) " confirm

    if [[ "$confirm" == "o" ]]; then
        git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
        bash git/tools/displayMessage.sh "üß® Commits locaux √©cras√©s, pull effectu√©"
    else
        bash git/tools/displayMessage.sh "‚ùå Pull annul√© pour √©viter la perte de commits"
        exit 1
    fi
else
    # Historique divergent
    bash git/tools/displayMessage.sh "‚ö†Ô∏è Conflit entre vos commits et ceux de GitHub"
    bash git/tools/displayMessage.sh "‚ùå Pull impossible automatiquement. Veuillez r√©soudre les conflits manuellement."
    exit 1
fi
